/********* VARIABLES *********/

// 0: Start Screen
// 1: Game Screen

int gameScreen = 0;

// Gravity
float gravity = .3;
float airfriction = 0.00001;
float friction = 0.1;

// Ball
float ballX, ballY;
float ballSpeedVert = 10;
float ballSpeedHorizon = 10;
float ballSize = 20;
color ballColor = color(0);

// Paddle
color paddleColor = color(0);
float paddleWidth = 100;
float paddleHeight = 10;
int paddleBounceRate = 20;


/********* SETUP *********/

void setup(){
  size(500, 500);
}


/********* DRAW *********/

void draw() {
  if (gameScreen == 0) {
    startScreen();
  } else if (gameScreen == 1) {
    gameScreen();
  }
}


/********* SCREEN CONTENTS *********/

void startScreen() {
  background(0);
  textAlign(CENTER);
  text("Click to start", height/2, width/2);
}
void gameScreen() {
  background(255);
  drawBall();
  applyGravity();
  keepInScreen();
  drawpaddle();
  watchpaddleBounce();
  applyHorizontalSpeed();
}
void applyGravity() {
  ballSpeedVert += gravity;
  ballY += ballSpeedVert;
  ballSpeedVert -= (ballSpeedVert * airfriction);
}
void makeBounceBottom(float surface) {
  ballY = surface-(ballSize/2);
  ballSpeedVert*=-1;
  ballSpeedVert -= (ballSpeedVert * friction);
}
void makeBounceTop(float surface) {
  ballY = surface+(ballSize/2);
  ballSpeedVert*=-1;
  ballSpeedVert -= (ballSpeedVert * friction);
}
void applyHorizontalSpeed(){
  ballX += ballSpeedHorizon;
  ballSpeedHorizon -= (ballSpeedHorizon * airfriction);
}
void makeBounceLeft(float surface){
  ballX = surface+(ballSize/2);
  ballSpeedHorizon*=-1;
  ballSpeedHorizon -= (ballSpeedHorizon * friction);
}
void makeBounceRight(float surface){
  ballX = surface-(ballSize/2);
  ballSpeedHorizon*=-1;
  ballSpeedHorizon -= (ballSpeedHorizon * friction);
}
void keepInScreen() {
  if (ballY+(ballSize/2) > height) { 
    makeBounceBottom(height);
  }
  if (ballY-(ballSize/2) < 0) {
    makeBounceTop(0);
  }
  if (ballX-(ballSize/2) < 0){
    makeBounceLeft(0);
  }
  if (ballX+(ballSize/2) > width){
    makeBounceRight(width);
  }
}
void drawBall() {
  fill(ballColor);
  ellipse(ballX, ballY, ballSize, ballSize);
}
void drawpaddle(){
  fill(paddleColor);
  rectMode(CENTER);
  rect(mouseX, mouseY, paddleWidth, paddleHeight);
}  
  void watchpaddleBounce() {
  float overhead = mouseY - pmouseY;
 if ((ballX+(ballSize/2) > mouseX-(paddleWidth/2)) && (ballX-(ballSize/2) < mouseX+(paddleWidth/2))) {
    if (dist(ballX, ballY, ballX, mouseY)<=(ballSize/2)+abs(overhead)) {
      ballSpeedHorizon = (ballX - mouseX)/5;
      makeBounceBottom(mouseY);
      // paddle moving up
      if (overhead<0) {
        ballY+=overhead;
        ballSpeedVert+=overhead;
      }
    }
  }
}


/********* START *********/

void mousePressed() {
  if (gameScreen==0) {
    startGame();
  }
}
void startGame() {
  gameScreen=1;
}
